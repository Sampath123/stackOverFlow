package com.hashedin.rest;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;

import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.hashedin.model.ActiveUser;
import com.hashedin.model.Comment;
import com.hashedin.model.CommentsCountOverTime;
import com.hashedin.model.ReputationClass;
import com.hashedin.model.TopUserCommentCount;
import com.hashedin.service.CommentService;

@Component
@Path("/comments")
public class CommentResource {

	@Autowired
	private CommentService commentService;

	@GET
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	public List<Comment> list() {
		// Handles GET on /comments. Lists all the comments we have in our system.
		return commentService.findAll();
	}
     
	@GET
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	@Path("/commentsCount")
	public List<CommentsCountOverTime> getNoOfComments() {
		System.out.println("called..............");
		
		return commentService.getNoOfComments();
	}
	
	@GET
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	@Path("/editedCommentsCount")
	public List<CommentsCountOverTime> getNoOfEditedComments() {
		System.out.println("called..............");
		
		return commentService.getNoOfEditedComments();
	}
	
	@GET
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	@Path("/correlation")
	public List<ReputationClass> getCorrelation() {
		System.out.println("called..............");
		
		return commentService.getCorrelation();
	}
	
	@GET
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	@Path("/Top20ActiveUser")
	public List<ActiveUser> getTopUserCommentCounts() {
		System.out.println("called..............");
		
		return commentService.getTopUserCommentCounts();
	}
	
	
	
	@GET
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	@Path("/{commentId}")
	public Comment get(@PathParam("commentId") Long commentId) {
		System.out.println("called........*****************************.... in id..");
		// Handles GET on /comments/{commentId}. Returns a single comment for the given
		// commentId.
		return commentService.find(commentId);
	}

	@POST
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	@Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	public Response create(Comment comment,
			@Context final HttpServletResponse response)
			throws URISyntaxException {
		// Handles POST on /comments. Creates a new comment and adds it into an
		// repository.
		commentService.save(comment);
		response.setStatus(Response.Status.CREATED.getStatusCode());
		return Response.created(new URI("/comments/" + comment.getId())).build();
	}

	@PUT
	@Path("/{commentId}")
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	@Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	public Comment update(Comment comment, @PathParam("commentId") Long commentId) {
		// Handles PUT on /comments/commentId. Updates the existing comment with the new
		// values.
		return commentService.update(comment, commentId);
	}

	@DELETE
	@Path("/{commentId}")
	public Comment delete(@PathParam("commentId") Long commentId) {
		// Handles DELETE on /comments/commentId. Deletes the existing comment and
		// returns the same.
		return commentService.delete(commentId);
	}
}
